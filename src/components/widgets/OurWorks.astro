---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import type { Content } from '~/types';
import Headline from '../ui/Headline.astro';
import ItemGrid from '../ui/ItemGrid.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import { twMerge } from 'tailwind-merge';

interface Props extends Content {
  imageContainerClasses?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  items = [],
  columns,
  image = await Astro.slots.render('image'),
  isReversed = false,
  isAfterContent = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
  imageContainerClasses = '',
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  wrapperClass="h-full w-full flex justify-center items-center"
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 lg:pt-0 lg:pt-0' : 'py-2 lg:py-4'} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
  <div class="mx-auto max-w-7xl p-4 lg:px-8">
    <div class={`lg:flex ${isReversed ? 'lg:flex-row-reverse' : ''} lg:gap-16`}>
      <div class="lg:basis-1/2 self-center fade-left fade-on-scroll">
        {content && <div class="mb-5 text-lg dark:text-slate-400" set:html={content} />}

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-4 lg:gap-y-8`,
            panel: 'max-w-none',
            title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            description: 'text-muted dark:text-slate-400 ml-2 rtl:ml-0 rtl:mr-2',
            icon: 'flex h-7 w-7 items-center justify-center rounded-full bg-[#FF6A3F] dark:bg-[#FF6A3F] text-gray-50 p-1',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />
      </div>
      <div
        aria-hidden="true"
        class={twMerge(
          'mt-10 lg:mt-0 lg:basis-1/2 fade-right fade-on-scroll content-center',
          imageContainerClasses ?? ''
        )}
      >
        {
          image && (
            <div class="relative m-auto max-w-4xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto w-full !object-contain !aspect-[2]"
                  width={500}
                  height={500}
                  widths={[400, 768]}
                  sizes="(max-width: 768px) 100vw, 432px"
                  layout="responsive"
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</WidgetWrapper>

<style>
  @keyframes fadeInLeft {
    0% {
      opacity: 0;
      transform: translateX(-50px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeInRight {
    0% {
      opacity: 0;
      transform: translateX(50px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .fade-left {
    opacity: 0;
    transform: translateX(-50px);
    transition:
      opacity 0.5s,
      transform 0.5s;
  }

  .fade-right {
    opacity: 0;
    transform: translateX(50px);
    transition:
      opacity 0.5s,
      transform 0.5s;
  }

  .visible {
    opacity: 1;
    transform: translateX(0);
  }
</style>

<script>
  const observerOptions = {
    threshold: 0.2, // Trigger when 20% of the element is in view
  };
  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
        observer.unobserve(entry.target); // Stop observing once the animation is triggered
      }
    });
  }, observerOptions);

  document.addEventListener('astro:page-load', () => {
    const elements = document.querySelectorAll('.fade-on-scroll');
    elements.forEach((el) => observer.observe(el));
  });
</script>
