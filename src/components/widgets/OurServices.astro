---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Features as Props } from '~/types';
import ItemGrid3 from '../ui/ItemGrid3.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  columns = 2,

  defaultIcon,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-5xl ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
  <ItemGrid3
    items={items}
    columns={columns}
    defaultIcon={defaultIcon}
    classes={{
      container: '',
      panel: 'mx-auto animate-on-scroll',
      title: 'lg:text-[1.3rem]',
      icon: 'text-white bg-[#0000000D] rounded-lg w-16 h-16 p-3 lg:w-[100px] lg:h-[100px] lg:p-3 mr-4 rtl:ml-4 rtl:mr-0 flex justify-center items-center',
      ...((classes?.items as Record<string, never>) ?? {}),
    }}
  />
</WidgetWrapper>

<script>
  function handleIntersection(entries: IntersectionObserverEntry[]) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
      }
    });
  }

  const observer = new IntersectionObserver(handleIntersection, {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  });

  document.addEventListener('astro:page-load', () => {
    const elements = document.querySelectorAll('.animate-on-scroll');
    elements.forEach((el) => observer.observe(el));
  });
</script>