---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  contact = await Astro.slots.render('contact'),
  actions = await Astro.slots.render('actions'),
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative lg:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none w-full overflow-hidden" aria-hidden="true">
    <slot name="bg" class="w-full">
      <div class="absolute inset-0 z-[-1] w-full h-full">
        {
          bg ? (
            <div class="relative w-full h-full">
              <Image src={bg} alt="hero background" class="w-full h-full -mt-40 mask-image" fetchpriority="high" />
            </div>
          ) : null
        }
      </div>
    </slot>
  </div>
  <div class="relative mx-auto px-4 sm:px-6">
    <div class="pt-[100px] lg:pt-[200px] pointer-events-none"></div>
    <div class="py-6 lg:py-16">
      <div class="text-center pb-10 lg:pb-16 mx-auto opacity-0" id="hero-content">
        {
          tagline && (
            <p
              class="font-serif text-2xl text-secondary dark:text-secondary font-bold tracking-wide uppercase mb-8"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-xl sm:text-3xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200 whitespace-pre-wrap"
              set:html={title}
            />
          )
        }
        <div class="mx-auto">
          {
            subtitle && (
              <p
                class="text-md sm:text-xl text-muted mb-6 dark:text-slate-300 whitespace-pre-wrap"
                set:html={subtitle}
              />
            )
          }
          {
            contact && (
              <Fragment set:html={contact} />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-slide-up {
    animation: slideUp 1s ease-out forwards;
  }

  .animate-slide-up-delay {
    animation: slideUp 1s ease-out 0.3s forwards;
  }

  .mask-image {
    mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 1) 80%, rgba(0, 0, 0, 0));
    -webkit-mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 1) 80%, rgba(0, 0, 0, 0));
  }
</style>

<script>
  function animateHero() {
    const content = document.getElementById('hero-content');
    const image = document.getElementById('hero-image');

    if (content) {
      content.style.opacity = '1';
      content.classList.add('animate-slide-up');
    }

    if (image) {
      image.classList.add('animate-slide-up-delay');
    }
  }

  // Run animation initially
  animateHero();

  // Run animation after the page has loaded
  window.addEventListener('load', animateHero);

  // Run animation on Astro page change
  document.addEventListener('astro:page-load', animateHero);
</script>
