---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import Button from '~/components/ui/Button.astro';
import type { CallToAction } from '~/types';
import { getAsset, getHomePermalink, trimSlash } from '~/utils/permalinks';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
const isTopOfPage = Astro.url.pathname === '/';
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full transition-all ease-in-out duration-300',
    isTopOfPage ? 'bg-transparent' : 'bg-white dark:bg-slate-900 border-b border-gray-50/0',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0 transition-all duration-300 ease-in-out opacity-0" id="header-bg"></div>
  <div
    class:list={[
      'relative text-default mx-auto w-full transition-all duration-300 ease-in-out',
      isTopOfPage ? 'py-4 lg:py-10' : 'py-3 lg:py-3',
      'px-3 lg:px-6',
      {
        'lg:flex lg:justify-between': position !== 'center',
      },
      {
        'lg:flex lg:justify-between lg:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo class="w-auto h-8" />
      </a>
      <div class="flex items-center lg:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class:list={[
        'items-center w-full lg:w-auto hidden lg:flex text-default overflow-y-auto overflow-x-hidden lg:overflow-y-visible lg:overflow-x-auto',
        { 'lg:w-1/2 justify-center': position === 'center' },
      ]}
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col lg:flex-row lg:self-center w-full lg:w-auto text-xl min-[1130px]:text-[0.9375rem] tracking-[0.01rem] font-bold lg:justify-center lg:text-[12px]"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button type="button" class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center">
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden lg:inline" />
                  </button>
                  <ul class="dropdown-menu lg:backdrop-blur-md dark:lg:bg-dark rounded lg:absolute pl-4 lg:pl-0 lg:hidden font-bold lg:bg-white/90 lg:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b lg:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 min-[1130px]:px-5 lg:px-2 block whitespace-no-wrap',
                            { 'text-primary dark:text-primary': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white px-3 py-3 flex items-center min-[1130px]:px-3 lg:px-3',
                    { 'text-primary dark:text-primary': href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden lg:self-center lg:flex items-center lg:mb-0 fixed w-full lg:w-auto lg:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 lg:p-0',
        { 'lg:w-1/4': position === 'center' },
      ]}
    >
      <div class="items-center flex justify-between w-full lg:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 lg:w-5 lg:h-5 lg:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4 p-2">
              {actions.map((btnProps) => (
                <Button
                  {...btnProps}
                  variant="primary"
                  class="ml-2 py-1.5 px-4 lg:px-5 font-bold shadow-none text-sm w-auto"
                />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>

<style>
  header.sticky {
    @apply fixed top-0 left-0 w-full;
  }

  header.sticky > div:first-child {
    @apply backdrop-blur-md bg-white/30 dark:bg-slate-900/30;
  }

  #header-bg {
    @apply absolute inset-0 transition-opacity duration-300 ease-in-out;
  }
</style>

<script>
  function updateHeader() {
    const header = document.querySelector('header');
    const headerBg = document.getElementById('header-bg');
    const headerContent = header?.querySelector('div:last-child');

    const scrollY = window.scrollY;
    const isTopOfPage = scrollY < 50;

    const isExpanded = header?.classList.contains('expanded');

    if (isTopOfPage && !isExpanded) {
      header?.classList.add('bg-transparent');
      header?.classList.remove(
        'bg-white/30',
        'dark:bg-slate-900/30',
        'border-b',
        'border-gray-50/0',
        'shadow-md',
        'backdrop-blur-md'
      );
      headerContent?.classList.remove('py-3');
      headerContent?.classList.add('py-4', 'lg:py-10');
      headerBg?.classList.add('opacity-0');
      headerBg?.classList.remove('opacity-50');
    } else {
      header?.classList.remove('bg-transparent');
      header?.classList.add(
        'bg-white/30',
        'dark:bg-slate-900/30',
        'border-b',
        'border-gray-50/0',
        'shadow-md',
        'backdrop-blur-md'
      );
      headerContent?.classList.remove('py-4', 'lg:py-10');
      headerContent?.classList.add('py-3');
      headerBg?.classList.add('opacity-50');
      headerBg?.classList.remove('opacity-0');
    }
  }

  // Run on initial load
  updateHeader();

  // Run on scroll
  window.addEventListener('scroll', updateHeader);

  // Run when the DOM content is loaded
  document.addEventListener('DOMContentLoaded', updateHeader);

  // Run when Astro swaps pages
  document.addEventListener('astro:after-swap', updateHeader);

  // Update header when link container scrolls
  const linkContainer = document.querySelector('nav ul');
  if (linkContainer) {
    linkContainer.addEventListener('scroll', updateHeader);
  }
</script>
