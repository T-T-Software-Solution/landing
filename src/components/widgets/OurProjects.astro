---
import type { ItemGrid } from '~/types';
import ItemGrid3 from '../ui/ItemGrid3.astro';
import { twMerge } from 'tailwind-merge';
export interface Props extends ItemGrid {
  title?: string;
  classes?: Record<string, string>;
}
const { title = await Astro.slots.render('title'), items = [], columns = 3, classes } = Astro.props;
---

<div
  class={twMerge(
    'w-full mx-auto bg-white flex flex-col gap-5 sm:flex-row items-center justify-center my-5',
    classes?.parentContainer
  )}
>
  {
    title && (
      <div class={twMerge('w-full md:w-1/4 self-start', classes?.firstChild)}>
        <h2 class="font-bold text-xl my-5">{title}</h2>
      </div>
    )
  }
  <div class={twMerge('w-full md:w-3/4', classes?.secondChild)}>
    <ItemGrid3
      items={items}
      columns={columns}
      classes={{
        container: twMerge(
          'gap-4 lg:gap-6 max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
          classes?.container
        ),
        panel: twMerge(
          'min-h-[150px] min-[390px]:min-h-[180px]  min-w-[150px] mx-auto animate-on-scroll rounded-lg shadow-[0_4px_30px_rgba(0,0,0,0.1)] dark:shadow-[0_4px_30px_rgba(0,0,0,0.1)] backdrop-blur border border-[#ffffff29] bg-white dark:bg-slate-900 py-5 px-2.5 flex-col items-center h-full justify-center',
          classes?.panel
        ),
        icon: twMerge('min-w-[100px] w-full h-auto text-primary mr-0 rtl:mr-0 rtl:ml-0', classes?.icon),
        description: twMerge('text-sm md:text-base', classes?.description),
        detail: twMerge('mt-auto', classes?.detail),
        image: twMerge('mx-auto', classes?.image),
      }}
    />
  </div>
</div>

<style>
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;
    transition-delay: calc(var(--animation-order, 0) * 0.1s);
  }
  .animate-on-scroll.show {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  function handleIntersection(entries: IntersectionObserverEntry[]) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
      }
    });
  }

  const observer = new IntersectionObserver(handleIntersection, {
    root: null,
    rootMargin: '0px',
    threshold: 0.1,
  });

  document.addEventListener('astro:page-load', () => {
    const elements = document.querySelectorAll('.animate-on-scroll');
    elements.forEach((el) => observer.observe(el));
  });
</script>
