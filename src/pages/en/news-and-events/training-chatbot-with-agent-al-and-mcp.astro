---
import Image from '~/components/common/Image.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { environmentConfig } from '~/config';
import Layout from '~/layouts/PageLayout.astro';

const metadata = {
  title: `Training Chatbot with Agent Al and MCP ร่วมกับ บริษัท บอร์นทูเดฟ จำกัด`,
};

const event = {
  date: 'July 9, 2025',
  title: `Training Chatbot with Agent AI and MCP in collaboration with BornToDev Co., Ltd.`,
  description: `    The company offers practical training workshops on "Training Chatbot with Agent AI and MCP" for organizations looking to enhance their customer service through chatbot systems with Artificial Intelligence (AI) technology and Multi-Channel Platform (MCP) systems. This training is organized in collaboration with BornToDev Co., Ltd., which specializes in skill development and technology advancement. If your organization is looking for solutions to implement Chatbots and AI to enhance customer experience, reduce repetitive workload, and increase communication efficiency across all channels, we are ready to develop together with you.`,
  descriptionLink: ['https://campaign.borntodev.com/training', 'https://www.facebook.com/share/p/1ExitWjWB8/'],
  image: `~/assets/images/ภาพปกAI.webp`,
  link: '/news-and-events/training-chatbot-with-agent-ai-and-mcp',
};

const images = [
  {
    src: `~/assets/images/ภาพปกAI.webp`,
    alt: 'ปก',
  },
    {
        src: `~/assets/images/ภาพปกAI1.webp`,
        alt: 'ภาพ1',
    },
    {
        src: `~/assets/images/ภาพปกAI2.webp`,
        alt: 'ภาพ2',
    },
    {
        src: `~/assets/images/ภาพปกAI3.webp`,
        alt: 'ภาพ3',
    },
    {
        src: `~/assets/images/ภาพปกAI4.webp`,
        alt: 'ภาพ4',
    },
];
---

<Layout metadata={metadata}>
  <WidgetWrapper containerClass="max-w-7xl mx-auto">
    <Headline title="" subtitle={event.title} classes={{ container: 'pt-12 lg:pt-0' }} />
    <div class="p-6">
      <p class="text-gray-600 mb-4 whitespace-pre-wrap">{event.date}</p>
      <p class="text-gray-600 mb-4 whitespace-pre-wrap">
        {event.description}
      </p>
      <p class="text-gray-600 mb-4 whitespace-pre-wrap">
        If you are interested, you can get free consultation with BornToDev's expert team today at
        <a
          href={event.descriptionLink[0]}
          target="_blank"
          rel="noopener noreferrer"
          class="text-blue-500 hover:underline"
        >
          {event.descriptionLink[0]}
        </a>
      </p>
      <p class="text-gray-600 mb-4 whitespace-pre-wrap">
        For more details, please visit
        <a
          href={event.descriptionLink[1]}
          target="_blank"
          rel="noopener noreferrer"
          class="text-blue-500 hover:underline"
        >
          {event.descriptionLink[1]}
        </a>
      </p>
    </div>
    <div
      class={`grid grid-cols-1 md:grid-cols-2 ${images.length > 2 ? 'lg:grid-cols-3' : ''} gap-4 mt-8 mx-auto max-w-6xl px-4 sm:px-6 lg:px-8`}
    >
      {
        images.map((image, index) => (
          <div
            class="overflow-hidden rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 fade-up-element image-container"
            style={`--delay: ${index * 0.1}s`}
          >
            <Image
              src={image.src}
              alt={image.alt}
              class="w-full h-full md:h-72 !object-cover !object-center image-scale"
            />
          </div>
        ))
      }
    </div>
  </WidgetWrapper>
</Layout>

<style>
  .fade-up-element {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;
    transition-delay: var(--delay, 0s);
  }
  .fade-up-element.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
  .image-container {
    overflow: hidden;
  }
  .image-scale {
    transition: transform 0.3s ease-in-out;
  }
  .image-container:hover .image-scale {
    transform: scale(1.1);
  }
</style>

<script>
  function handleIntersection(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible');
        observer.unobserve(entry.target);
      }
    });
  }

  const observer = new IntersectionObserver(handleIntersection, {
    root: null,
    rootMargin: '0px',
    threshold: 0.1,
  });

  document.addEventListener('astro:page-load', () => {
    const elements = document.querySelectorAll('.fade-up-element');
    elements.forEach((el) => observer.observe(el));
  });
</script>
