---
import { Image as AstroImage } from 'astro:assets';
import { SITE } from 'astrowind:config';
import { twMerge } from 'tailwind-merge';
import logo from '~/assets/images/logo.svg';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';

const {
  title = await Astro.slots.render('title'),
  descriptionFirst = await Astro.slots.render('descriptionFirst'),
  descriptionSecond = await Astro.slots.render('descriptionSecond'),
  imageExecutive = [],
  imagCertified = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
  contentImage = await Astro.slots.render('contentImage'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="justify-start items-start gap-12 flex flex-col lg:flex-row">
    <div class="flex-col justify-start items-start gap-5 flex w-full lg:w-1/3 animate-slide-up-delay animate-on-scroll">
      <AstroImage src={logo} alt={SITE?.name} class="w-auto h-12" />
      <div class="self-stretch">
        <h2
          class={twMerge('font-bold leading-tighter tracking-tighter font-heading text-heading text-3xl md:text-4xl')}
          set:html={title}
        />
        <div class="self-stretch text-zinc-600 text-lg md:text-xl font-normal">
          {descriptionFirst && <p class={twMerge('mt-4 text-muted')} set:html={descriptionFirst} />}
          {descriptionSecond && <p class={twMerge('mt-4 text-muted')} set:html={descriptionSecond} />}
          {
            contentImage && (
              <div class="flex justify-center items-center mt-4">
                <Image
                  src={contentImage}
                  alt={`mvp-azure`}
                  class={twMerge('w-full h-full')}
                  fetchpriority="high"
                />
              </div>
            )
          }
        </div>
      </div>
    </div>
    <div class="w-full lg:w-2/3 flex flex-col gap-5">
      <!-- Section For Image Executive -->
      <div class="flex flex-wrap -mx-2 sm:-mx-3">
        {
          imageExecutive.map((img, index) => (
            <div class="w-1/3 px-2 sm:px-3 mb-4 sm:mb-6 animate-slide-up-delay animate-on-scroll">
              <div class="rounded-xl overflow-hidden shadow-lg">
                <Image
                  src={img.url}
                  alt={`image-${index}`}
                  class={twMerge('w-full h-full', img.class?.image)}
                  loading="lazy"
                  decoding="async"
                  fetchpriority="high"
                />
              </div>
            </div>
          ))
        }
      </div>

      <!-- Section For Imag Certified -->
      <div class="flex flex-wrap -mx-2 sm:-mx-3">
        {
          imagCertified.map((img, index) => (
            <div class="w-1/3 px-2 sm:px-3 mb-4 sm:mb-6">
              <div class={twMerge('relative animate-slide-up-delay animate-on-scroll', img.class?.container)}>
                <Image
                  src={img.url}
                  alt={`image-${index}`}
                  class={twMerge(
                    'w-full h-auto object-contain rounded-xl animate-slide-up-delay animate-on-scroll',
                    img.class?.image
                  )}
                  fetchpriority="high"
                />
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <style>
      .animate-on-scroll {
        opacity: 0;
        transform: translateY(20px);
        transition:
          opacity 0.6s ease-out,
          transform 0.6s ease-out;
        transition-delay: calc(var(--animation-order, 0) * 0.1s);
      }
      .animate-on-scroll.show {
        opacity: 1;
        transform: translateY(0);
      }
    </style>

    <script>
      function handleIntersection(entries: IntersectionObserverEntry[]) {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('show');
          }
        });
      }

      const observer = new IntersectionObserver(handleIntersection, {
        root: null,
        rootMargin: '0px',
        threshold: 0.1,
      });

      document.addEventListener('astro:page-load', () => {
        const elements = document.querySelectorAll('.animate-on-scroll');
        elements.forEach((el) => observer.observe(el));
      });
    </script>
  </div>
</WidgetWrapper>
