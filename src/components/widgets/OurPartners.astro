---
// Import necessary components and types
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import ItemGrid3 from '~/components/ui/ItemGrid3.astro';
import type { Features as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  columns = 5, 
  defaultIcon,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-5xl ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
  <ItemGrid3
    items={items}
    columns={columns} 
    defaultIcon={defaultIcon}
    classes={{
      container: 'gap-4 lg:gap-6 max-w-7xl grid grid-cols-1 min-[390px]:grid-cols-2 md:grid-cols-3 lg:grid-cols-5', 
      panel: 'mx-auto animate-on-scroll min-h-[150px] min-[390px]:min-h-[180px]  min-w-[150px] py-5 px-2.5 flex-col items-center h-full justify-center',
      icon: 'text-white w-full lg:max-w-[330px] p-3 flex justify-center items-center',
      ...((classes?.items as Record<string, never>) ?? {}),
    }}
  />
</WidgetWrapper>

<script>
  function handleIntersection(entries: IntersectionObserverEntry[]) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
      }
    });
  }

  const observer = new IntersectionObserver(handleIntersection, {
    root: null,
    rootMargin: '0px',
    threshold: 0.1,
  });

  document.addEventListener('astro:page-load', () => {
    const elements = document.querySelectorAll('.animate-on-scroll');
    elements.forEach((el) => observer.observe(el));
  });
</script>
